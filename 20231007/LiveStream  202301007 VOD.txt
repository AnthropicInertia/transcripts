Today is 7th.
7th?
Oh, shit.
Okay.
I'll change the...
Okay.
Stream is live.
Change the date.
7th.
So, I started recording.
My bad.
So, hey.
Welcome to the stream.
We already started talking about something and then realized that we haven't been streaming.
And I have been recording instead.
So, let me quickly correct that mistake.
And so, now that you go live, we were talking about how do we want to approach the format
and the medium and the brand.
So, let me quickly correct that mistake.
And so, now that you go live, we were talking about how do we want to approach the format
and the medium and the brand, et cetera, et cetera, and what are the things that drives
the momentum as well as what are the things that gives us more energy to continue forward
doing the same thing as in things that we enjoy.
So, with that said, with that brief context, I don't want to dig too deep into that because
we were in the middle of our conversation.
I'll hand it over to Kosta who was speaking at the last moment.
Go ahead, Kosta.
The question was that how do we use the things that we have now to kind of build, you know,
not to call it a content pipeline as much as different areas of work that we want to get to.
And the core of it is that there are a bunch of ideas floating around that is probably
valuable to audiences beyond just the two of us.
And what we would like to do is maybe take them into forms of blog posts as a podcast,
eventually building onto some software, some, you know, usable things.
But then instead of looking at these things as separate things that we have to produce,
like not to be in a stage where, you know, hey, write 10 blog posts this month,
two podcasts this month, and I don't think either of us wants to get into this.
So instead, one of the suggestions was that why don't we use these weekly discussions
as stage zero, which is the most malleable part of the entire initiative.
Over three to four such iterations in a month, we would have three to four such sessions,
which brings us to stage one, at which point distil or extract the information
and categorize the information that has been created in these discussions,
which then goes on to build blog posts, goes on to inform podcasts,
but then and any other forms that come in.
But for any audience member, anybody listening in, the part that I was just saying last
and I guess there would have something different or addition to say here is I see different
levels of engagement as different levels of what we were talking about the orbit model in
and how that kind of changes the concept of looking at communities as a funnel
that you get community members at the top of the funnel, they slowly filter down.
Instead of that, look at communities as objects orbiting around the central body.
The central body of that solar system, so to say, would be the initiative
or the project that you are building people around.
So in that sense, these stages are sort of the inner workings.
So these are very inner layers of the orbit.
And then like blog posts and all you can get to how much more malleable that form is
for us to maybe act on any feedback that comes in.
So that's probably a bit vague.
But the idea is that we start with this and roll out anything new that comes off of this data.
How does that sound?
Yeah, that sounds good.
Right.
To put my focus back into the part that you started with, not to call it a content pipeline,
but the stages.
How about I kind of lay down those like stages as they're coming into my head
and then figure that part out.
So say, for example, the first initial part would be thinking out loud,
which is what we are doing.
So first audience is us, like you and me, essentially, right?
So basically, we are thinking ourselves out loud.
And we are doing so through this streaming thingy.
So some people might want to watch this live and participate in that process.
They would pose the question live.
I'm not talking about right now.
I'm talking about in its more mature stage.
So they would want to come along for the journey, essentially,
and be live participants of what is being discussed.
That's stage one.
We are the stage zero.
That is stage one.
The next ones would be the people who watch the world next day.
Another layer would be people who hang out on our Discord server or something like that,
something of that kind, like more real-time community support.
I'm not saying Discord has to be it.
It can be Slack. It can be Discord.
It can be some other more decentralized or federated mechanism, metrics.
That's not the point.
The point is like real-time communication, more of a real-time communication platform,
where they can post questions, have discussions on that.
So it basically becomes a community, like another layer of community.
And the layer above that becomes the ones who read the blog posts or newsletters,
whatever you want to call it, on a particular time basis.
Or maybe there will be a level below that,
people who see the curated posts on different mediums we share it on,
Twitter or LinkedIn or other places where it gets shared.
They read about it.
Okay, they understand that there are these people doing something called Anthropoceneershare
or something like that.
And then the layer above that is people who subscribe to the channels or blog posts
and watch the video when they're published on a monthly basis or something like that.
So these can be the things.
I may have missed some things.
If you give it some time and figure out maybe we can document this whole thing together
and pack together, then we have a more complete picture of how to go about it.
And I think that's already a reasonably good distribution.
And in all of these cases, like you said, it's also the level of engagement,
which is what I called as malleability of the project under the hood.
Because at this stage, any question coming in, we can respond to that,
which will influence the course of the discussion.
Over time, anything that happens in the community can influence the course of discussion
in the next iteration.
Anything that comes up through the blog posts will probably improve that blog post
and potentially improve something that we write next.
So, you know, like how malleable, it's like your distance from the center.
So that's what I'm saying. This is a good way of you have basically adopted that orbit
of thinking into this.
I love that model though.
Yeah.
I love that model.
Yeah.
Cool. So that kind of that kind of like so basically we are aligned there.
Would you say like or do we have any kind of decoherence there?
Because I would love to like those are the points more important to me than
like setting up the base correct is more important to me than the particular topic of this month
or topic of this day, essentially.
That's what I'm saying.
Because unless we figure out a way to sustainably do this for a long course of time, right?
Doing a magic trick for a day is not what is going to get us further.
Anyways, that's why I was getting it.
Cool. So with that said, we were talking about the future of software
and you were talking about scoping this out so that it's valuable for people you are talking about.
So with this new light, I can say that let's not think about it in terms of what would be the scope
that would be valuable.
Let's talk about the whole thing.
And then in retrospect, we can choose that.
Hey, this is the part that.
So do you think in your organization the practices that you're following is effective by doing X, Y and Z?
What if I can show you that's not the case and you could do this instead?
What if like which kind of teams should use flow based programming?
Or rather same thing about are you a hardware organization
and you're following the software practices of build fast, break fast kind of approach?
Do you know that in hardware that doesn't work so well as it does for software?
And they're not the same thing.
Hardware, you should plan more better in those kind of ways.
Like the concepts that we kind of take readily, but not necessarily are true for.
It doesn't apply everywhere or new light that can be shed on something.
We can then pick those topics out and put them on a funnel for like can be presented better in a sense,
not part of the only the real time discussion that we had.
So with that said, there doesn't need to be in my mind a certain kind of boundary that we need to follow or maintain here.
This can be extreme raw stream of thoughts, as long as it's not something that is a boundary bordering on illegal or something.
I don't think there's any problem with that.
Even that's a restriction.
I would eventually want to get lifted, but not possible now.
So I'm sticking with it.
So I think I want to double down back on the build fast, break fast.
Is that what you said?
So that is like fast iteration approach, right?
So it doesn't have to be perfect.
Build something.
Let's see how well does it work if something doesn't put another layer of bandaid on top of it.
And now it does.
And now it's better.
Yeah, we can say that.
So I want to start there because I feel like it's something that talks very close to my heart.
As in the issue that I lost your video.
No, it's fine.
I'm just switching. Sorry about that.
No worries.
So the build fast, break fast or like ship quick and every other such phrases that software development has gathered.
Yeah.
And there is one fundamental issue with those approaches.
And this is way more overlooked than I would like to have.
So that's I guess just one area that I wanted to begin with.
And just to pick on why build the base, like spend time building the base is important, even though it looks like you are building very slow.
You're not shipping at all.
The difference between the two is if you chart to build fast and break fast sort of iteration, you get from zero to ten very fast.
You can do that. Right.
But in the process, what slows down as your breakages happen?
Because you're breaking your like what build fast break fast kind of translates to is where you don't worry about backwards compatibility of a project because you're like I am shipping it.
I can ship all client instances.
Everybody will be on the same version and things would go perfectly like as if you've solved the distribution problem.
So this is one facet of it.
But the other facet of it is as your patches come in.
As more and more patches come in, your builds become slower and slower and slower.
So you are breaking fast, but you're not building fast enough.
And over time, the rate of your iteration slows down.
And which means any new feature at some point you make statements like this, that this system was not designed to accommodate those issues in the first place.
So you have hit a threshold condition.
But most of the time, if we really dissect that issue, what you will find is it's not that the system was not built.
It's that the system has had so many patchworks, so many band-aids.
It is standing on such a thin edge that any one more, you know, like when the Jenga is like that full last break will collapse it.
You know, it kind of gets to that stage.
So build fast and break fast essentially slows down your iterative pace over time.
So how do you then go back to building a foundation?
What should that foundation do for you?
If you're starting off a new project, if you're starting as a new software project, you're starting off on a new learning whatever.
But let's stick to the software project area right now.
If you focus on building out the systems first that help you iterate fast in the future, there is a difference between the two.
In build fast and break fast, even though you're saying that we want to iterate fast and ship fast,
you're often not taking care of other things that break because you say that this is collateral cost at acceptable to breaking.
And in the other format, you are saying that, OK, I know systems will break.
Things do software breaks, there are errors.
But what I want is to have the ability to iterate very fast, ship out and update very fast, no matter how pervasive the issue may be.
Or if I'm building something new, how can I ship on that?
Which means as a software team, especially let's say you're building a new SaaS product, build out your platform team first,
make your any core runtime, any core technical decisions, lock them in.
Make sure that you have evaluated things that you want to work with.
So, for example, any standard SaaS, you don't want to bicker about what database to use.
You definitely don't want to bicker about how should the schema be structured if you're building a new service.
You don't want to bicker about what should be the API standard or that, hey, I want APIs to be built this way,
which means there are certain standardization, which is what forms the base.
But that is the thing that you tend to first that your first shipment is to your consumer is the internal team,
which they can use to then iterate fast on top of it.
So, what that does is pretty much the blue line on this chart is it takes you off to a slow start.
But then you get to this point of incremental returns where cumulative returns start pushing you broader.
And with such a system, the key line can pretty much be open, scalable, community-driven processes,
making giant improvements right after that threshold kicks off because you're not stuck in the same loop.
You're not breaking as much anymore.
Yeah, going gets easier as you get going, essentially.
So, the reasons are labeled R and K.
And I'll come back to that.
There is a very good reason with all that you explained about how putting more time in figuring stuff out works well
and why you think so and why I think so, but many people don't.
It boils down to a very different theory that they don't seem coherent, but they're absolutely exactly that way,
which is why in the hardware industry, if you go for that R selection strategy, you would fail miserably.
You have to do K.
You have to do K.
And in the software industry, the way the gratification is modeled, if you are fast to market,
albeit with stupider products, and you got some people subscribed to that IDR model,
now when your better version comes out, they already are subscribed to it.
So you have more as in thing to play with.
And you only can get more people out of that because your product can only get better in a sense.
And for anybody new coming in, if they go with the K model, by the time they get to the crossover point,
chances are that trend has already surpassed, that entire market has been utilized.
Now, that is true and that was true, however, in a time where R and K followed a very different timeline.
And the K selection actually needed a long time to actually be competitive.
Now, with the new kind of tools, you can make K itself faster.
You can plan faster, plan better, and actually cross the limit set points very aggressively than before,
whereas R will always get stuck at some point and get like the going will get tough for it as it continues going forward
because it didn't start with enough groundwork to sustain that.
It becomes a jenga block.
So now those two curves follow two different styles of evolution.
One is a tortoise laying 500 eggs and basically leaving it be going over.
Think of those 500 eggs as 500 different ideas built for breakfast.
Half of them would not even make it to the sea for the first time ever.
Some of them would, one of them might, but laying more number of eggs
gives the opportunity for maximum variance or variable, variabilities to be explored, which one gets selected.
So if you're trying to make a selection, like which kind of selection would work better, that works very well in evolution.
Lay more eggs. Don't worry much about it.
Move on to your life. Next year, come back and lay 500 more eggs.
That's it. Life is easy. You don't have to do much.
Whereas if you go up the food chain or like the, how do you say, like the success chain of the evolutionary species, what humans do,
like we spend our 18 years, first 18 years being kid.
Like not only that we have, we like something can things can go wrong.
There are other entities will make sure things don't go wrong.
They will give you that lower hanging part that you haven't built up yet.
They'll give you that will make you get you to that catch up point where you can cross over.
Now you are adult. Now go make break boundaries up to you.
Right. So that happens only in species who have found out their niche or the selection has already been selected.
Say, for example, sharks don't evolve as much as other species.
They have been they have been formed before dinosaurs.
They're still there. Right.
The reason being they have found their niche.
Even if you go for a homogenous species, like snakes, for example, two different species of snakes can behave to completely different.
A king cobra actually is a viviparous, not viviparous.
So it gives birth to baby snakes, which is awkward and weird.
It takes care of those baby snakes like is not expected out of snake like their lowest form of reptiles in a sense.
Right. Why is that the case? If you think about it, OK, what does it do in a food chain?
It eats other snakes is basically breaking that boundary.
That green set point is basically transcending over what it is said to be.
It's like a ratatouille. You're said to be a mouse, but you have become a chef.
It's almost like that way. If you need to break that kind of boundary, if you have to like set any kind of sublime,
like become something that other people perceive as sublime, then you have to go the case selection mechanism.
You cannot have excellence going by the art selection, but the art selection is what gives you the tools to work with for the case selection.
So the entire whole point that I was trying to build is that not one can be thrown out for the sake of the other.
However, one needs to find the balance is neither of those things alone is sufficient.
If you get too comfortable in your skin in the case selection model, one certain asteroid will come and wipe your entire not only species,
but entire ecology out because you are too comfortable being large and big and breathing too much oxygen and cannot burrow under the ground.
So that's what ends up happening. So if you want to sustain and survive, you need both.
However, you need to pick and choose the balance how much of innovation of art you want and how much planning of key you want.
Usually that balance, usually whenever people say something is good, we have a tendency to do only that, like overdo those things.
So completely like off the salt, like would never touch salt ever again, that kind of thing.
We tend to overdo that. So those kind of practices is where the challenge is like.
How do you think? First of all, do you see the point that I was trying to make?
Is did I explain it enough or did I like not explaining the screen back?
As in you just share it again.
Oh, OK. I just I crossed it as in I didn't save it.
Didn't save it. OK. Yeah.
So anyhow, I was back as in I can.
I was showing it back as in I I stopped showing.
That's what you mentioned.
And if you can share it again. Oh, sorry.
No, I like I have to draw it again. Yeah.
So the thing that I was trying to get to, and I think you did a very good segue to it is that the time it takes, right?
Because one of the things to look at and again, whether the key or the art flow, it depends on what your destination is.
Like if you are doing something that is really wrong, then because there are chances that the results of your computation of the information that you need won't be available for a few years.
So there is a way to get whatever.
So the key curve can take the advantage of varying time, a specific milestone or a specific inflection point to be precise exists.
Now, if you want to actually maximize this area, I would have asked you to shade the RK intersection.
Yes, because the best way to then combine both because you need the short bursts of acceleration.
Again, if you look at agile processes and scrum, you always have this concept of spikes, right, which are your exploratory area.
The very interesting pattern that emerges when you chart it this way is you kind of get to a tangential like a diagonal double helix that forms as a result of the constant intersections of the R and K lines.
And which is your step function.
Tick tock model.
It's called tick tock tick tock model.
And they've introduced it for their processor generation.
One shrinks the die size.
One increases the number of processor.
And the point I'm trying to say is that the double helical structure exists in nature in exactly these kind of situations that where there is a contention between the energy usage and time.
Or efficiency over time.
Or there is this constant correlation because there are two things that are time orbiting around each other.
So what this would look like if I am to map this to physics, if this would look like a binary star system pacing through the galaxy or through a universe, the route that they will chart.
The important thing is that your R and K have bounded like they have attraction towards each other.
If your R and K separate, if they diverge, then you at some point would choose a certain way.
And that's fine.
Like divergence is also good in some areas.
Like let's say you have you have hit that area where you know that you found your niche and you want to carry on on the K trajectory.
It's OK to then detach from the R trajectory.
But what would soon happen is after a while, the same patterns would emerge because again, this is fundamentally a step function.
You have to flat line and then you have to climb again, which is why I was saying that the best thing to then do is look at how do you combine innovation?
So that if you shared that area between R and K, the reason I was saying that what that is, it's your safety margin.
That R cannot exceed a certain boundary before K catching up.
So if you then just continue on that front, it it also means that those are stable.
When you wrote E here, what was your E?
Entropy, but energy fits just fine.
OK, I went to energy.
I was like something doesn't feel right.
So you see what you're saying that, yeah.
I am saying the classic dualist philosophy.
I got it.
I see it that way, by the way.
But this is not the first time.
So you can go on this double helical process, but the double helical grows over time.
What to watch out for is yet if E is entropy, this makes all the more sense.
That this curve should kind of be a linear and mildly.
If you chart the intersection points of R and K and plot that, it should be nearly linear.
Yeah, it would be.
In fact, the best equilibrium, you are doing it perfect when it is a perfect 45 degree angle on the E by T chart.
This one that is a perfect charting the growth of entropy over time and having some points where you are merging back.
So that's quite a lot of theory.
But then how does this boil down to what we are talking of building the base that are these discussions are pretty much the R line.
That it's the upward curve of the R line.
And at some point, if we continue along the R line, we are going to not produce anything that is worthwhile and we are going to flatten out.
There won't be newer ideas.
The K line here is something that is taking whatever is there, creating that baseline, meeting up to meet like a publishing point.
Now, when let's let's mark that as like E1T1 sort of, let's say the first inflection point.
First, let me mark this inflection point, this point.
Yeah. So this after this first inflection point, something interesting is happening.
If you notice, the R is sort of taking a period of recovery where it is catching up.
But in that point, the K line actually has a lot to catch up on.
So that publishing the feedback and everything comes in some sort of stabilized delivery.
Meanwhile, this needs to build up.
So one interesting, I mean, this is, of course, hand drawn.
But when you plot it, what's going to happen is your R would never dip below its current Y levels.
Your R would flatten and then go up again.
So these the P here is one of those key inflection release points.
Whenever you are at this P, each time you can take a call on whether for further like which direction to go next.
Because from there, you can choose key. I want to do another burst of development.
But in any case, it ends up looking like a double helical pattern.
Which is why I do not promote like personally to go for either one of those approach.
And if you notice, we haven't been doing either one of those approach by itself.
What we did is that we kept the idea generation factory.
This R as it is untouched. Go ahead, do your thing.
Right. At some point you will hit a ceiling or something like that.
No more ideas coming out. I don't know when that will happen.
If that does, but we are not tying it with success of the whole thing to that only.
We're saying, you know, let's talk about how do we classify that categorize that?
How do you set up the platform in a way that part of the discussion was the case selection.
Right. So we did both at the same time.
And that is the ideal approach to go on about it is because how at ease both those like the two parts of the double helical structure is with with itself.
So the moment when we come to the inflection point where the distribution mechanism is having same amount of success as the idea generation one.
So idea generation has told enough and the distribution mechanism has reason enough to come to the point.
That's when we have to switch our mindset about, hey, do we need to cover more ground, more areas that we can cover?
And this mechanism of distribution that works is just let more subscribers come in.
Whatever people were talking about or listening to, let them talk about it, listen to that and think it will keep on going there.
It will flatline much later, much after.
By that time, let's think about whether there are more ideas to talk about.
Right. So that way, it will keep on shifting perspective.
We have to put a little more here, a little more effort there, a little more effort there at the cost of putting a little less effort here or there.
And that way, like they will go back and forth.
But this idea identifying those inflection points is where the actual.
So if I had to talk about like how tech CEOs or basically CXOs should think about these kind of things, it would be.
Not only them, for anybody for that matter, it makes the same sense.
But how do your priorities, the two aspects of it, where do they meet and at which point you should decide that you need to shift gears in either one of those?
Because this battle between.
Have you watched WALL-E, the movie?
There is a space thing where WALL-E and EVA goes in a spiral.
That's exactly what it ends up looking if it is not drawn poorly on MS Paint.
So that's that's what I was getting at.
So that's what it will constantly change and shift.
And that is a good good way. No case selection is perfect case selection for forever.
The world, the reality, the universe would put blockers in your in front of you that you would need to rethink about it.
You need to shift perspective and change up some of the parameters to make it fit better and know our selection is going to be better as well.
But yes, by definition, it will flatten out if you don't start to reorganize that.
I have so many examples for this. I don't know.
Can you name the green plane?
So that is how the progress looks like from zoomed out.
Put a marker to it so that I can refer to it.
So it's P, the progress. I thought P was the point.
Oh, OK. So that I should have called the point P as like, OK, wait, infection.
So it's it can be I. I don't I don't want to acknowledge the infection.
I said just name the name the axis. If that's P, then that's fine.
Now, the important thing to remember is why in our discussions,
at least some of these places where these things work out,
because if you map this to the functioning of a good product and development team in most software organizations,
the R is your product management who are going out,
exploring possibilities, coming back to you with arguments, the K catches up.
Then there is the R going down below the K is the period where product management is
gathering feedback for something that has been shipped.
Meanwhile, there is a constant thing that is going on, like full pleasure development going on.
What's going on? Because by then you are validating at one point that goes and then you again come back out.
Right. So the green, what is important in this is if you want to independently
control the rate of R and K, you might fail.
It might look like it is intuitive that I can, of course, turn.
But no, the important thing is the green line, the P plane that wherever you are going,
the P plane should target there, which means if you are going somewhere,
you don't have a lot of time, your P plane will be far more sloped upwards so that you reach at the end of the point.
But what this mainly looks like. Yeah.
So it's basically matter and anti-matter in a sense, like how much it goes above the progress line.
It also you also have to have that much below the progress.
Anyways, yeah, one of the things I want to.
The reason I said this is important is I said about the double helical structure.
So if you just draw the chart, the distance from the like the delta R with the delta from P at each point,
and then you do delta K from P, you should never do R to K as a straight thing.
You should always branch off from P. So your P is kind of ideal where I want to go to.
So that is if you then look at two stars revolving around each other, running around the galaxy.
If you can plot their movement, you will get the orbit of both the suns.
Right. Yes. And that is the important factor that where is the thing going?
Because the way you nudge this system to go in any other direction is by changing where that green would end up.
Right. So basically, the green is the barycenter of those two like two body system is the barycenter where other two things are basically revolving around.
So in this setup, over time, it would be considered as access, essentially.
Yeah. Now, why this is more important is you need to look at this.
It's of course over T. So it's a it's a state machine slash motion snapshot, whatever.
The critical thing to know is this is a very simplified version.
This is a very simplified version. This is a like simplified in the sense this is a reduced version.
In real world, you would have at least three or four such accesses pulling along each other.
But you would probably be able to call them as R1, R2 and K1, K2.
You can broadly group them in these two opposing forces categories.
The reason is it's like imagine all of Jupiter's moons orbiting around Jupiter.
What does that look like that you have that many groups like things going on?
Right. So one of the common things that comes up in most product,
especially the sort of software product who are more tuned to community that they want to take in community feedback,
is there is a friction between internally on should I prioritize community feedback or should I prioritize what my CEO wants?
And that presents a very weird but very difficult to solve friction as well.
And one way to address that is again be true to your T plane.
If you have a clear enough idea of where that is, you can just map a community feedback on the distance like chart the delta R from P.
See if it is within acceptable range, in which case treat is just as the same as any internal team member has suggested it.
Right. That it is on that curve where I see delta R reducing over time till it intersects with K.
So we speak maths.
Yes. In essence, it's very it will take too many words to explain otherwise.
But what I'm trying to say is just map the functions.
So you don't want to start with R alone or K alone.
Then the part that comes in is once you identify this, you realize the importance of iterations.
Fast iterations on this plane would mean more frequent intersections between R and P, R and K.
Slower iterations would mean longer durations, but slower iterations have a challenge key.
You might have difficulty the longer R and K have diverged, the longer it might take to converge them back.
So you want to place a limit limiter function on what is the maximum distance possible for R before the K function triggers an upward curve.
Right. For the people listening to this and being a little bit.
I don't know what was the right term.
I would like to just break this down.
I'll give an example, because sometimes I've seen what works out of the exoteric discussions is that an example immediately grabs the attention back.
So I will give an example. Chip vendors, right?
That's probably it's not a rocket science in that sense.
It's actually more complicated than rocket science.
It is super complicated stuff.
Probably the one of the most complicated things we do as a species is producing chips.
Now, there are always a lot more factors that gets into this and creates this to be not as simple as that.
This graph, two different factors.
But if you try hard enough, you can still always make a multi-body problem into a two-body problem.
And this is a model that Intel used to follow and now still now follows is when their odd generation of chipsets like chips, 15th generation, 13th generation, 11th generation also,
they follow a particular kind of R and different kind of K or basically the phase shift essentially.
What is R here would become K here in that kind of way.
So what they do, they have boiled it down to like, we need to do two things in order to give or provide people with more amount of computing power in the same or similar kind of package.
We need to do two things. We need to lower the size of the silicon as in the transistors that we have and pack more into the same time.
So how about we put more innovation and both those things, they are not two separate things that are happening separately.
What is happening is that from the moment of their team is done with 11th generation, that team starts working towards the 13th generation.
Their objective can just be how do we pack more chips into that same layout, same size, whatever the LGA size is.
And whatever the moment 12th generation are done, they would move to 14th generation.
How do I produce as in create the transitions themselves are smaller, right?
In that sense, they create double 2x the phase then because if you see about this, this graph eventually comes down and meets somewhere over here.
Then when it starts back again, this point and this point are practically the same point.
So basically 2x that phase then perceived phase that becomes its original pace.
So every two generation, they're doing the exact same thing all over again, starting new going.
But for the first part of it, one team is in experimental experimentation mode.
The other team is in production mode.
The next phase, the other team is in the experimentation mode and this team is in production.
And that works so well for them.
They're sticking by it.
And even though AMD threatened them with a very different kind of innovation where they're like, we don't actually want to even build the whole thing in one day.
So to do that, it's much, much easier to build them in smaller pieces and put them back together.
So I want to do that chiplet design.
So at that point, what do you do?
You can just split off like, hey, there's a tick tock model teams that we have.
How about if the tick tock model teams as one, R or K, and the chiplet team as R and K, R or K, depending on which phase they are in.
So you can make any time any multi-body problem into two-body problem.
So one team is going to look into how the chiplets can be made.
The other team is going to look like always how I can make the chiplets themselves more denser.
So in that sense, what is in the ending up happening is that no matter how complicated the system is, it's not only this does not only apply to a very simple or theoretical only situations.
You can make it apply anywhere, wherever you can perceive a duality.
You can perceive a pull or push and pull tug of war between two different forces.
Do I do this or do I do that?
This should actually help you out with that.
I lost your video feed.
All right.
Right. I don't know where else I was going with this.
Should I be starting to think about a better analogy or example?
I kind of think like the chiplet design or the chip vendor kind of example is not genuine.
I think we can just probably follow because we were talking future software development.
This is one place to come back to when we were saying that like the base when we went into this discussion.
Is there any supplement that follows that?
This I don't know, but it's something that is visible and like I'm not saying somebody explicitly follows.
I'm not saying that.
Yeah. So the only thing to remember is that while you said that you can break down a multi body problem into a two body problem in most cases,
but there will be edge cases where you are stuck with a three body problem because you start dividing like decomposing and you end up with three fundamental elements because like the lowest number you can't divide three.
So what goes on in that kind of a situation is you are presented with a slightly more chaotic world.
The two body world is far more deterministic.
The three body world is extremely chaotic.
And science fiction, plugway, three body problem and all if you just like just that three body problem itself is one of the things to geek out on.
It's such a beautiful mathematical problem and social problem.
Anyway, you want to put it right.
But what happens is and I think this will come up more.
This will become more and more relevant as complexities of software development increase because there are more things riding on it.
And I have experienced this in some form.
Like I said, it becomes a three body problem because in a traditional software development organization, you cannot always compare things back down to two, especially when you are more community folks.
And this is something I've seen happen with the more progressive software organizations.
Because in a traditional software org, you have your like product design, development, management, whatever as one function, you have development as a function.
So you sort of have two broader sections.
But then the moment you bring in.
So what these two teams do with user feedback is the user feedback is split into their separate buckets, right?
That is how you are breaking down a complex system into a two body system that when user feedback is coming in, you are saying, is this a product feedback?
Is this sort of engineering feedback?
And it kind of you are channelizing.
But what happens when you bring in a community as a first class citizen in this process?
And say, for example, the software, the way more of the community focused, even for profit companies, the software, those who, you know, actually take community input seriously.
And the reason you see the open source world and especially partially commercial commercial open source worlds be such a tricky minefield to access, also to build and maintain, because at some point you take decisions which are harmful for the community.
At some point, the community asks something which is detrimental to the earnings or the sustainability of the project.
So then it is still not that difficult.
It is just one other access which might have chaotic influence on others.
So at that point, you have two choices.
Do you want to then merge the community like whenever you start with a three body problems, essentially validating them that if it is not three stars that are orbiting each other, in which case, well, good luck.
But if you have some control of the system, you want to merge one towards the other.
For example, are your internal stakeholders?
In fact, in fact, you just said that screw it if it's stars.
Good luck with that.
That's exactly what is going to happen.
I was just going to come back to giving you the same solution.
That's exactly what is going to end up happening.
What else do you think is going to end up happening?
Yeah, so eventually, I mean, our nearest star neighbors.
Yeah, like Centauri system, so Proxima Centauri, so Alpha Centauri.
That's a three body problem.
Yes.
The smaller one and the larger one.
So the three body problem series is based on that star system.
Oh, I see.
I see.
So but the very interesting thing that happens is eventually systems coalesce given long enough time.
But what if you don't want to give that long enough time?
The immediate answer to especially those building software where you want to involve the community is do not keep a distinction between your internal stakeholders and external stakeholders.
Everybody is a stakeholder for the thing that has been built.
You have the best keywords that are probably on your payroll who are your internal stakeholders.
So then you have moved that, you know, the graph of requirements instead of having a CEO to fight and a community to fight.
You're like community.
CEO is just a community representative or the community is just an extension of my internal team.
Now, I want to really push that model.
I have not had much success in coalescing those because individual egos kind of still, you know, border.
But what would it look like to build an org where you, I mean, what would it look like?
We have seen this orgs built, but reducing the chaos in that system, coalescing them better such that the community is a homogeneous entity.
Right.
So one challenge that I've seen, the part that bothered me the most,
which is why I'm trying to put my best foot forward to not piece of people and try to reach people is that most people in position or power,
the way our selection worked out for them is that were they very aggressively assertive, were they very conscientious?
And so those are the things that things that propelled them forward and put in a position of power are not.
Have this put enough thought meditating about a certain topic, validating whether that's correct, true or false?
No, not that. Right.
So what ends up happening is that the people who needs this kind of help the most are least likely to seek it
or least likely to even be open to it if you even if you hand it over to them.
So the way I'm starting to think about is that not how do we distribute,
but rather finding out who are those people or how do we get those people to put to a place where they would be open to taking these ideas in the first place.
Do you think this discussion that we are having, most, many or most people who are running or having a team that they need to run better,
they have all the intentions to make it run better, but do they have the intent capacity and the availability or being a position?
How do you commit a crime?
You need to do three things. You need to be in a place. You need to have the intent and you have to need to have the capability.
So I'm saying that can you find the trifecta of people in a mass scale?
You don't. You find very rare, few samples and those samples are already kind of jaded out of the system.
Take yourself for an example.
The only reason you are so motivated to talk about these things is because how much it bothered you when you are or were in the system.
Right.
How do we find those people?
How do we find how those people, instead of being jaded out of the system,
how they can actually be part of the system and drive that change from the inside instead of like,
I'm out of here instead of that.
I think that is probably the best bet that we have got because you cannot make a horse out of an ass.
At least I'm open to be proven wrong, but I have tried and I have failed miserably every time I tried to go that route.
But it is better. It is more effortful.
If sorry, it is more.
What do you call that thing? Fulfilling. To find out the horses, even if lower in number and then train them to become the horses that you want them to be.
You will get a lot of kicks. That is fine.
But eventually it will get to that position and then you will count that as a success.
That's much better than spending enormous amount of time pretending this donkey is a horse and can replace a horse.
It's not what it was. That's how I think about this whole thing.
Who should we talk to about this kind of stuff?
That may not be the right answer to the question that you have asked.
But if you can touch on the way, how would you want to go on about it?
Then I probably can add some more thoughts about it.
This was my immediate, very like deep seated or rooted kind of fast, fast answer, essentially, not the nuanced answer.
I understand that.
The way I want to go about it is.
Not by starting to look for.
But instead, take these things as frameworks.
These can be packaged as frameworks.
Anybody who's in a scenario, so let's say this applies.
To a certain way of building structuring an org.
Then what would those principles be?
And I'm kind of drawing in from how the orbit framework went from being just a brilliant, like very beautiful abstract idea to an implementable framework.
And the idea, the first thing that you do in any such implementation is you map to existing concepts, which means if I were to take any organization.
Produce this chart based on their activities.
What does my RNK planes look like?
Do they even intersect?
Do they even exist?
Is one of the first things.
So being able to.
So I would actually look at this as a framework, publish this as a framework.
And with like framework applied to specific scenarios.
And just going detailed into some of those maybe that if you are and then speaking to personas, right?
That how to apply this if you are a junior software developer, how to apply this if you're a senior developer, how to apply this if you are a new people manager, how to apply this if you are an architect.
Because at each position, at each levels of power, there are different areas that somebody can influence in.
But the importance of such a framework comes when it gives a handbook for the entire power structure.
So that whoever is bringing this in into an organization, let's say they find something which they feel.
Let's say me as a manager, as a new people manager, find something that can benefit from.
But what happens is when I bring something in, it's also on me to help others learn, others implement.
And that becomes one of the burnout points for somebody like me who wants to do good, who wants to build something from the inside.
But if I got something which not just told me what it looks like for me, what are the things that I need to do, as much as what does it look like throughout the entire power structure, sort of the framework that helps them see at their views.
That immediately becomes a lot more useful.
And you then see different levels of adoption.
And whatever levels of adoption an org goes through, sometimes the impact stays limited to one team in a larger org, like one team of four or five members or 10 members.
Over time, over a few quarters or few iterations, what starts happening is other teams start seeing that this team is doing something different where they have become more stable.
They are shipping software better, they are more predictable.
So what is it that they are doing?
If the answer at that point is not specific people, but a certain way of work that they have been able to adapt, then immediately there is that viral proof based distribution that happens.
So what I'm then saying is the way I would like to bring this to the masses is by looking at the layers and seeing what would be that implementation, and maybe even looking at this from a few lenses.
For example, let's say the future of software development is one, then building an organization that follows some of those principles being one.
I kind of see this as a handbook with use cases.
One specific example.
Let me see if I can find I'll share with you what I mean.
But this is this is the direction.
Now, what I mean with this is that with the theoretical framework in place, the people to talk to are those who have tried applying it.
Get that feedback and sort of build from there as well.
What I'm not sure about is if that is the work that we want to do in mass.
Or is this more of a blog post series.
I've been trying to match the match the suggestion up with my experience of exact same situation, which has happened.
And my expectation was what you said.
People see that, hey, some other team are having more success or equal success with different practices or sense more success with sympathy.
What is it that that is different about them?
And why is it that way?
And let's learn from it.
Let's implement that.
The reality is much more grimmer than what?
What would that idealistic viewpoint would suggest?
First of all, nobody would go through like want to look into that mirror or acknowledge that that somebody else is doing.
So I'll give you a more tangible, actual and real.
So a team practicing agile and another team is not one team is completely into procuring.
Procuring high quality talents, letting them do whatever they want.
And they have a good backlog management of like, hey, here are the things that are a priority for our organization, for the bigger goal of our organization.
We need to get all of these things done.
You're not bound to do one thing or the other, but whatever you pick and choose.
Try to be successful at it, like implement that successfully.
Don't leave it at half as way.
You will have to produce enough result out of it that we know that you've spent your time with it.
Even if you fail and you want to hand it over to somebody else, that's fine.
So that's one approach.
And the other one is like the normal baseline run of the mill agile.
It's not even that the what is the what does the book say kind of is the normal practice of agile.
So that's what is happening.
Which team do you think is over the course of time producing better result?
And I'm not going to give you the answer here.
I don't want to sound biased to anybody who is listening.
I don't want people to tune out there because it doesn't match up with their expectation.
The thing is, after over two years of that happening, one team is doing like sustaining very well at low overhead of operation and having generating very good results overall.
But the other team or teams are not really ready to learn from that at all.
They don't want to acknowledge that has anything to do with their lack of momentum has anything to do with the practices they're following or rather the time they're ending up spending doing things that may or may not contribute to the overall progress of the organization.
They simply would not acknowledge that in the first place.
Improvement comes after you acknowledge that, hey, something can be improved.
So in that sense, if you take it from there, I would argue you would be the first blocker that you face is convincing them that they need to do something differently because they are not doing it well.
Solutions are easier.
Accepting you need a solution is the hardest part.
Whatever I've seen, and it's kind of heartbreaking like those are the parts that actually I get mad like I'm usually not.
I take everything just most of the time, but those are things like real wastage of potential and people choosing to ignore facts, just because their worldview does not align with that.
Those are the things that grind my gear very hard, essentially.
I'll stop there. I know that I might rant a long while if I just if I'm allowed to get started with this, I'm going to stop there.
And, yeah, that's it.
I shared the two links there is actually the exit to community.
One of those things pretty close to my heart.
But the way these people have applied this, it was one of the example that I was trying to show is one of the ways I would like to, you know, work on it.
The core idea behind exit to community is how can we build organizations such that they serve the end community that you are using.
And then for startup founders or for people building new organizations instead of targeting IPO, which is like the two common forms of exit that you are either acquired or you go IPO.
This is a third alternative to that, which is saying you plan for an exit to community and there are a bunch of tools, a bunch of things that you can use.
They also have many such organizations, all of them, of course, smaller scale and exit to community focused organizations tend to be niche focused because it's kind of like identifying a niche user base,
building for them in the hope that eventually all of them will take ownership of this entire organization.
So which fits very well into how you and I think of initiators that for us, a maturity is when it has gotten community acceptance such that we can move on to the next.
In fact, spin up multiple side by side.
Its existence does not rely on the parents taking care of it on a daily basis.
Exactly. Exactly. Like the kids have grown up.
But the difference is this produces far more focused, far more impactful work because you are not trying to chase artificial money.
You are always focused on sustainability.
And that is how things would go. So I gave that as an example.
I think this is a fantastic example. I love it.
I went to the I went to the links and for the people watching the stream, they would have seen that because that's the one that will be shown there in my screen capture.
Right. So they would have seen it already. I went to the base.
I didn't share it. I was going through that about browser window.
Understood. So that is the idea behind.
I mean, in fact, exit to community exhibits this tendency, you know, that you are never moving too far from your green medium.
And you are balancing innovation and sustainability.
Right. Eventually to a delivery point.
No matter how you explain it, the baseline of that is playing that infinite game versus finite game where people are exiting from with money.
They're playing a finite game. They have to win somewhere.
They have to put it on an objective scale of this much, that much, et cetera.
But the moment you're exiting the community, you are ensuring survival of something that is bigger than the support that you can provide.
Like, how long can you stay within the game and how long can you, along with a mind share of a whole other multiple layers of people,
sticking to that would provide it or give it runway would be completely different.
The sustainability would be completely different and make a lot of order of magnitude different or bigger, essentially.
So basically you are playing an infinite game and significant a couple of orders of magnitude.
You are enabling yourself to do more stuff.
That is the moment somebody would understand that from that finite infinite game perspective, you don't have to sell more stuff to it.
They immediately know how they want to play it out loud, play it out.
But for most people, that's that part is not that obvious.
That choice is not that obvious.
How do you convince somebody to understand and recognize the difference between the finite and infinite game?
Why chasing after simply just for money?
It's not like in my mind, it's not too different than the paper clip maximizing, right?
The theoretical, the thought experiment of paper clip maximizer, rogue AI that learned, OK, how to make more paper clips out of anything and everything,
goes ahead and starts making paper clips out of anything and everything, depletes the resources, natural resources,
just makes paper clips because that's what it's trained to do.
That's what where it finds its meaning of purpose in life, essentially.
Or whatever that that might be.
So we by trying to maximize profit, we're being that profit maximizers in the exact same vein.
So how do you convince somebody to think of it?
Think of it differently.
And the good thing is, the reason I pointed out is this entire like the second link that I shared, the PDF, that's the gem.
That's something to like print and keep with you.
That talks of how different levels of organizations can deal with it, with some case studies, with some ways of thinking.
And, of course, unblocking some of those ways of thinking, leaving you with some more things to do.
So this is one I was saying this format, like I feel like the output of all of this discussion, if this is if it is that a PDF,
really, that people like a book and also to say that you can or a booklet that you can share, publish.
I think that itself has value to build.
But I wanted to eventually arrive at exit to community.
I'm glad I kind of came through this, because again, talking of the future of software development,
what we were trying to mention with the build fast, break fast thing, there are two considerations here.
And I just touched on them.
We can move on.
The first is the current set of tooling that we have or that we're evolving to does enable you to build actually faster.
So your art cycles can be smaller.
Deployment capabilities have increased so much more over the last decade that the maintaining a state of the art deployed system
is something that pretty much any small team can do today.
And it's not even as crude as Ansible in 2012-13.
Even Ansible feels so much better already.
But the point I'm trying to say is that they have become better because they have continued on that certain line of democratization of technology.
Rather, that's a cliche, but maybe it will give me a catchphrase.
But the point is, it's more breaking down technology to make it more available to more and more people.
And the current LLM driven AI boom that we are seeing actually introduces a very key element into that equation.
That now you do not just build fast when you break fast.
Constantly saying break fast and messing with my head.
But when you actually break too often, let's say your breakages can be significantly more harmful.
Yes, correct.
And you cannot continue using these same tools, experimenting and testing in the same way.
You need a far more contained.
It's like if Sun was like, hey, we need to collide two particles.
I just give me any random desert on Earth.
Because we used to collide things.
See if I used to test cars, I used to mash cars against fast moving cars and test how they broke.
You can't do the same with two photons.
You can't do the same with two atoms colliding.
So what we need, though, is make sure that the breakages, make that breaking a part of your testable framework.
Which means you don't optimize build often, break often or build often and disrupt often.
Fast iterations.
And if you follow that line, so you would want to minimize the gap between the two.
You would want the R and K lines again to coalesce as often as possible.
But know that what's going to happen with our current set of technology is the double helix.
Especially if you have short iterations are going to look like bubbles strained after one another, a chain of bubbles.
It's not you're not going to have the gentle curve anymore.
And the only reason is you're probably looking at time in a different way.
If you expand the time axis, you zoom in, you will again start seeing that curve.
But now it is just slightly steeper.
So what it means is short iterations, quick tests, immediate feedback is essential with the sort of systems that we are working.
Because I mean, think of it as you are a crew member of the USS Discovery, which has just gained sentience.
It has just come across emotion.
So this started discovery season four, and then it decides to plunge towards the sun.
You don't have a lot of time, right?
Now, if your systems were more like, hey, take the system down one by one, examine, it's not going to work.
Which means your fail saves need to take into account that the R thing can actually suddenly break out.
You won't be able to bring it back in that breaking out might be your AI has gained sentience.
If you define sentience as just having emotions, however we define, let's just say it's beyond your control and beyond your control.
If you look at the two stars orbiting each other, right?
In this case, one of them decides to shoot off in another direction.
You would then have two choices.
Let that go.
Like that ship has sailed or try to converge enough, pull it, exert enough influence to then bring that back to a meeting line.
And I think this is the point I was trying to get to that why this framework actually applies.
It really shows the implications of software development.
Yeah, so that was very interesting, actually.
So I think I like, OK, how about we keep a particular time?
Maybe next week, discuss about the perception of time versus control.
How much time you need for which kind of controls, right?
On the surface, it might seem like what is there to discuss about it.
But trust me, there's a lot to dig in over there.
And actually, it can be it can be seen in a multitude of ways.
Only part that I'm going to mention right now is that the stoic versus the will to power philosophies that you said that there are only two options.
One is.
Guess I will die.
Otherwise, like I know I might die.
If I sit down, I'll still die.
Then why not die swinging the sword and try to make align the world to my needs, essentially.
So those both those approaches, either of those approaches can work.
But depending on the best option that you've got is that never be rushed for time.
The best controls that you have got is never the ones that do not rush you towards a particular set of time or time wise delivery, temporal deliveries, essentially.
That's that's going to be part of the next that that that episode when you talk about control versus time.
At any point, if you feel like you're rushed for time, it only means you haven't established your controls well enough for that.
And your concerns are correct on at least the AI front is that that was true for nuclear when we found nuclear weapons and power as well in nuclear energy.
We could harness nuclear energy.
How would you going to how are you going to harness it?
Controlled burn versus explosion that in itself was to the point.
In retrospect, looks like much smaller problem that you need a couple of thousand to actually wipe out humanity.
So it's not not as readily of a problem.
So as we go forward as a species, we are going to cause bigger and bigger of those potential harms that we can cause to ourselves by not being mindful about that are versus scaling.
How much planning versus how much exploration can we do?
And there's that. I don't think there's an answer to this.
It's just that the moment any one of us lose sight over one for the other.
That's the moment something bad would happen.
Essentially, it's not a question of if but when it becomes the only thing that we need to ensure is that the control and the exploration both basically go hand in hand, going back to the topic of that.
So I'll stop there. And I think it's better to close the discussion as well, essentially within the limited amount of time because we need to get into the practice.
So I think this, this was with the 10th, maybe we want to go a bit more into specifics in some of those areas and stuff.
So I think I can end the stream.
So in this case, we can just wrap up.
Let's let's wrap it up here.
This was pretty good discussion, by the way. Thanks, anybody who's watching.
I know Sumit watches it every, every week. At least that's the only feedback that I have so far.
Maybe there are other people folks are watching.
If you are watching for somebody who is watching, let me or Kostov know that you're watching.
What do you think of the stream and we'll try to make that part of the process of our growth of this as well.
So with that said, thanks for sticking around and see you next week.
Cheers.
Cutting words from you now.
